import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    java
    id("com.github.johnrengelman.shadow") version "7.1.2"

    // Publishing
    signing
    `maven-publish`
    id("io.github.gradle-nexus.publish-plugin") version "1.1.0"
}

repositories {
    mavenCentral()
}

dependencies {
    implementation("org.postgresql:postgresql:42.5.1")
    implementation("com.googlecode.json-simple:json-simple:1.1.1")

    testImplementation("junit:junit:4.13.2")
    testImplementation("org.testcontainers:testcontainers:1.17.6")
}

group = "net.bitnine"
version = "1.4.3"
description = "Agensgraph JDBC"
java.sourceCompatibility = JavaVersion.VERSION_1_8
val githubUrl = "github.com/skaiworldwide-oss/agensgraph-drivers"

java {
    withSourcesJar()
    withJavadocJar()
}

publishing {
    publications.create<MavenPublication>("maven") {
        from(components["java"])
    }
}

tasks.withType<Jar> {
    destinationDirectory.set(file("$rootDir/dist"))
}

tasks.withType<ShadowJar> {
    relocate(
        "org.json.simple",
        "net.bitnine.agensgraph.deps.org.json.simple"
    )
    relocate(
        "org.postgresql",
        "net.bitnine.agensgraph.deps.org.postgresql"
    )
    dependencies {
        exclude(dependency("junit:junit"))
        exclude(dependency("org.testcontainers:testcontainers"))
        exclude(dependency("org.hamcrest:hamcrest-core"))
    }
}

publishing {
    publications {
        create<MavenPublication>("release") {
            from(components["java"])

            pom {
                name.set(project.name)
                description.set(project.description)
                url.set("https://$githubUrl")

                licenses {
                    license {
                        name.set("The Apache Software License, Version 2.0")
                        url.set("https://www.apache.org/licenses/LICENSE-2.0.txt")
                        distribution.set("repo")
                    }
                }

                developers {
                    developer {
                        id.set("emotionbug")
                        name.set("Alex Kwak")
                    }
                }

                issueManagement {
                    url.set("https://$githubUrl/issues")
                    system.set("GitHub Issues")
                }

                scm {
                    connection.set("scm:git@$githubUrl.git")
                    developerConnection.set("scm:git@$githubUrl.git")
                    url.set("https://$githubUrl")
                }
            }
        }
    }
}

/**
 * https://docs.gradle.org/current/userguide/signing_plugin.html
 */
signing {
    sign(publishing.publications)
}

/**
 * It requires authorization.
 *
 * export SONATYPE_BITNINE_USER=...
 * export SONATYPE_BITNINE_PASSWORD=...
 */
nexusPublishing {
    repositories {
        create("sonatype") {
            try {
                val sonaUser =
                    providers.environmentVariable("SONATYPE_BITNINE_USER").get()
                val sonaPassword =
                    providers.environmentVariable("SONATYPE_BITNINE_PASSWORD")
                        .get()

                username.set(sonaUser)
                password.set(sonaPassword)
            } catch (ignored: Exception) {
                /* will ignore if not exists. */
            }

            nexusUrl.set(uri("https://oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}
